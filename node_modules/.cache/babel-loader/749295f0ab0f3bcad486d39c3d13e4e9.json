{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Shamit/CodeProjects/react_project/src/store/CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport { useReducer } from \"react\";\nimport CartContext from \"./CartContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === 'ADD') {\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id);\n    const existingCartItem = state.items[existingCartItemIndex];\n    let updatedItem;\n    let updatedItems;\n\n    if (existingCartItem) {\n      updatedItem = { ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = updatedItem;\n    } else {\n      updatedItems = state.items.concat(action.item);\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  if (action.type === \"REMOVE\") {\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.id);\n    const existingItem = state.items[existingCartItemIndex];\n    const updatedTotalAmount = state.totalAmount - existingItem.price;\n    let updatedItems;\n\n    if (existingItem.amount === 1) {\n      updatedItems = state.items.filter(item => item.id !== action.id);\n    } else {\n      const updatedItem = { ...existingItem,\n        amount: existingItem.amount - 1\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = updatedItem;\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  return defaultCartState;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  const addItemToCartHandler = item => {\n    dispatchCartAction({\n      type: 'ADD',\n      item: item\n    });\n  };\n\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({\n      type: 'REMOVE',\n      id: id\n    });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 12\n  }, this);\n};\n\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/mnt/c/Shamit/CodeProjects/react_project/src/store/CartProvider.js"],"names":["useReducer","CartContext","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedTotalAmount","item","price","amount","existingCartItemIndex","findIndex","id","existingCartItem","updatedItem","updatedItems","concat","existingItem","filter","CartProvider","props","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","cartContext","addItem","removeItem","children"],"mappings":"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","sourcesContent":["import { useReducer } from \"react\";\r\nimport CartContext from \"./CartContext\";\r\n\r\n\r\nconst defaultCartState = {\r\n    items: [],\r\n    totalAmount: 0\r\n};\r\n\r\nconst cartReducer = (state, action) => {\r\n    if (action.type === 'ADD') {\r\n        const updatedTotalAmount = state.totalAmount + (action.item.price * action.item.amount);\r\n\r\n        const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id);\r\n        const existingCartItem = state.items[existingCartItemIndex];\r\n        let updatedItem;\r\n        let updatedItems;\r\n        if (existingCartItem) {\r\n            updatedItem = {\r\n                ...existingCartItem,\r\n                amount: existingCartItem.amount + action.item.amount\r\n            };\r\n            updatedItems = [...state.items];\r\n            updatedItems[existingCartItemIndex] = updatedItem;\r\n        } else {\r\n            updatedItems = state.items.concat(action.item);\r\n        }\r\n        return {\r\n            items: updatedItems,\r\n            totalAmount: updatedTotalAmount\r\n        };\r\n    }\r\n\r\n    if (action.type === \"REMOVE\") {\r\n        const existingCartItemIndex = state.items.findIndex(item => item.id === action.id);\r\n        const existingItem = state.items[existingCartItemIndex];\r\n        const updatedTotalAmount = state.totalAmount - (existingItem.price);\r\n        let updatedItems;\r\n        if (existingItem.amount === 1) {\r\n            updatedItems = state.items.filter(item => item.id !== action.id);\r\n        } else {\r\n            const updatedItem = {...existingItem, amount: existingItem.amount - 1};\r\n            updatedItems = [...state.items];\r\n            updatedItems[existingCartItemIndex] = updatedItem;\r\n        }\r\n        return {\r\n            items: updatedItems,\r\n            totalAmount: updatedTotalAmount\r\n        }\r\n    }\r\n\r\n    return defaultCartState;\r\n};\r\n\r\n\r\nconst CartProvider = props => {\r\n\r\n    const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\r\n\r\n    const addItemToCartHandler = (item) => {\r\n        dispatchCartAction({\r\n            type: 'ADD',\r\n            item: item\r\n        });\r\n    };\r\n\r\n    const removeItemFromCartHandler = (id) => {\r\n        dispatchCartAction({\r\n            type: 'REMOVE',\r\n            id: id\r\n        });       \r\n    };\r\n\r\n    const cartContext = {\r\n        items: cartState.items,\r\n        totalAmount: cartState.totalAmount,\r\n        addItem: addItemToCartHandler,\r\n        removeItem: removeItemFromCartHandler\r\n    };\r\n\r\n    return <CartContext.Provider value={cartContext}>\r\n        {props.children}\r\n    </CartContext.Provider>\r\n};\r\n\r\nexport default CartProvider;"]},"metadata":{},"sourceType":"module"}